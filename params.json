{"name":"Wraith","tagline":"Wireless reconnaissance, collection and exploitation toolsuite.","body":"# WRAITH: Wireless assault, reconnaissance, collection and exploitation toolkit.\r\n\r\n> You knew that I reap where I have not sown and gather where I scattered no seed?\r\n\r\n## 1 DESCRIPTION:\r\nAttack vectors, rogue devices, interfering networks are best visualized and identified over time. \r\nCurrent tools i.e. Kismet, Aircrack-ng and Wireshark are excellent tools but none are completely \r\nsuitable for collecting and analyzing the 802.11 environment over a period of time (without implementing a \r\ncustom interface). \r\n\r\nWraith is an attempt to develop a toolsuite that eases the collection, collation and analysis of temporal \r\n802.11 data in order to provide administrators with the ability to view their networks from a bird's eye \r\nview and drill down as necessary to a single device.\r\n\r\nOnce the reconnaissance and collection development is stable, assault plug-ins will be developed to aid\r\nWLAN administrators in the security testing of their networks. \r\n\r\n## 2. REQUIREMENTS: \r\n * linux (preferred 3.x kernel, tested on 3.13.0-43)\r\n   - NOTE: some cards i.e. rosewill usb nics were not fully supported through iw\r\n     on earlier kernels\r\n * Python 2.7\r\n * iw 3.17\r\n * postgresql 9.x (tested on 9.3.5)\r\n * pyscopg 2.5.3\r\n * mgrs 1.1\r\n\r\n## 3. MODULES: Currently consists of four components/modules\r\n\r\n###  a. Radio: 802.11 network interface objects and functions\r\n\r\nObjects/functions to manipulate wireless nics and parse 802.11 captures.\r\nPartial support of 802.11-2012\r\n\r\n#### Standards\r\n* Currently Supported: 802.11a\\b\\g\r\n* Partially Supported: 802.11n\r\n* Not Supported: 802.11s\\y\\u\\ac\\ad\\af\r\n\r\n### b. Suckt: Small Unit Capture/Kill Team (Wraith Sensor)\r\n\r\nSuckt is a 802.11 sensor consisting of an optional collection radio (i.e.\r\nspotter), a mandatory reconnaissance radio (i.e. shooter) and an RTO which relays\r\ncollected data to Nidus, the data storage system (i.e. HQ). Suckt collects data\r\nin the form of raw 802.11 packets with the reconnaissance (and collection if present)\r\nradios, forwarding that date along with any geolocational data (if a gps device\r\nis present) to higher. The reconnaissance radio will also partake in assaults in\r\ndirected to.\r\n\r\n### c. Nidus: Data Storage Manager\r\n\r\nNidus is the Data Storage manager processing data received from Suckt. Nidus is the \r\ninterface to the backend Postgresql database, processing data in terms of raw 802.11\r\nframes, gps location, and 'device' details/status. \r\n\r\n### d. GUI: non-operational gui\r\n\r\n## 4. ARCHITECTURE/HEIRARCHY: Brief Overview of the project file structure\r\n\r\n* wraith/                Top-level package\r\n - \\_\\_init\\_\\_.py          this file - initialize the top-level (includes misc functions)\r\n - wraith-rt.py         the gui\r\n -    LICENSE              software license\r\n -    README.txt           details\r\n -    CONFIGURE.txt        setup details\r\n *    widgets              gui subpackage\r\n      *  icons            icons folder\r\n      -  \\_\\_init\\_\\_.py      initialize widgets subpackage\r\n      -  panel.py         defines Panel and subclasses for gui\r\n*  radio                subpackage for radio/radiotap\r\n - \\_\\_init\\_\\_.py      initialize radio subpackage\r\n - bits.py          bitmask related funcs, bit extraction functions\r\n - iwtools.py       iwconfig, ifconfig interface and nic utilities\r\n - iw.py            iw 3.17 interface\r\n - radiotap.py      radiotap parsing\r\n - mpdu.py          IEEE 802.11 MAC (MPDU) parsing\r\n - infoelement.py   contstants for mgmt frames\r\n - channels.py      802.11 channel, freq utilities\r\n - mcs.py           mcs index functions\r\n - oui.py           oui/manuf related functions\r\n*  suckt                subpackage for wraith sensor\r\n - \\_\\_init\\_\\_.py      initialize suckt package\r\n - suckt.conf       configuration file for wasp\r\n - suckt.log.conf   configuration file for wasp logging\r\n - suckt.py         primary module\r\n - internal.py      defines the Report class\r\n - rdoctl.py        radio controler with tuner, sniffer\r\n - rto.py           data collation and forwarding\r\n - sucktd           sucktd daemon\r\n*  nidus                subpackage for datamanager\r\n - \\_\\_init\\_\\_.py      initialize nidus package\r\n - nidus.conf       nidus configuration\r\n - nidus.log.conf   nidus logging configuration\r\n - nidus.py         nidus server\r\n - nmp.py           nidus protocol definition\r\n - nidusdb.py       interface to storage system\r\n - simplepcap.py    pcap writer\r\n - nidus.sql        sql tables definition\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}